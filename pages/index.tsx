import type { NextPage } from 'next'
import Head from 'next/head'
import Header from '../components/header'
import ItemList from '../components/itemlist'
import { useQuery, useQueries } from '@tanstack/react-query'
import { ItemInterface } from '../util/types'

const Home: NextPage = () => {
  const fetchTopStories = async (): Promise<number[]> => {
    const res = await fetch(
      'https://hacker-news.firebaseio.com/v0/topstories.json'
    )
    const data = await res.json()
    return data
  }

  const fetchItem = async (itemId: number): Promise<ItemInterface> => {
    const res = await fetch(
      `https://hacker-news.firebaseio.com/v0/item/${itemId}.json`
    )
    const data = await res.json()
    return data as ItemInterface
  }

  const {
    isError: isTopStoriesError,
    isLoading: isLoadingTopStories,
    data: topStoryIds,
    error: topStoriesError,
  } = useQuery(['topStories'], fetchTopStories)

  const storyData = useQueries({
    queries:
      topStoryIds?.slice(0, 10)?.map((itemId) => ({
        queryKey: ['item', itemId],
        queryFn: () => fetchItem(itemId),
        enabled: !!topStoryIds,
      })) || [],
  })

  const allSuccess =
    storyData && storyData.every((story) => story.isSuccess === true)
  console.log(storyData)

  if (isLoadingTopStories || !allSuccess) {
    return <p>Loading...</p>
  }

  if (isTopStoriesError && topStoriesError instanceof Error) {
    return <p>{topStoriesError.message}</p>
  }

  console.log(topStoryIds)

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        <div className="container mx-auto">
          <ItemList items={storyData.map((sd) => sd.data!)} />
        </div>
      </main>
    </div>
  )
}

export default Home
